#include <stdio.h>
#include <cuda.h>
#include <cstdlib>
#include "helper_functions.h"

__global__ void add (int *a,int *b, int *c, int size) {
	int tid = blockIdx.x * blockDim.x + threadIdx.x;
	if(tid < size) {
		c[tid] = a[tid]+b[tid];
	}
}

int main(int argc, char** argv) {
	if(argc != 4) {
		fprintf(stderr, "Wrong arguments. Usage: %s <vector-size> <block-count> <thread-count>\n", argv[0]);
		return EXIT_FAILURE;
	}
	int N = atoi(argv[1]);
	int blockCount = atoi(argv[2]);
	int threadCount = atoic(argv[3]);
	
	int* a;
	int* b;
	int* c;

	a = (int*)malloc(N*sizeof(int));
	b = (int*)malloc(N*sizeof(int));
	c = (int*)malloc(N*sizeof(int));

	StopWatchInterface *timer=NULL;
	sdkCreateTimer(&timer);
	sdkResetTimer(&timer);
	sdkStartTimer(&timer);

	int *dev_a, *dev_b, *dev_c;
	cudaMalloc((void**)&dev_a,N * sizeof(int));
	cudaMalloc((void**)&dev_b,N * sizeof(int));
	cudaMalloc((void**)&dev_c,N * sizeof(int));
	for (int i=0;i<N;i++) {
		a[i] = i;
		b[i] = i*1;
	}
	cudaMemcpy(dev_a, a , N*sizeof(int),cudaMemcpyHostToDevice);
	cudaMemcpy(dev_b, b , N*sizeof(int),cudaMemcpyHostToDevice);
	cudaMemcpy(dev_c, c , N*sizeof(int),cudaMemcpyHostToDevice);
	add<<<1,N>>>(dev_a,dev_b,dev_c, N);
	cudaMemcpy(c,dev_c,N*sizeof(int),cudaMemcpyDeviceToHost);
	for (int i=0;i<N;i=i+1000) {		
		printf("%d+%d=%d\n",a[i],b[i],c[i]);
	}
	cudaFree(dev_a);
	cudaFree(dev_b);
	cudaFree(dev_c);

	cudaThreadSynchronize();
	sdkStopTimer(&timer);
	float time = sdkGetTimerValue(&timer);
	sdkDeleteTimer(&timer);

	printf("%d %f\n", N, time);

	free(a);
	free(b);
	free(c);	

	return 0;
}

